// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package DecodedSample

@SerialVersionUID(0L)
final case class VehicleSignals(
    vehicleId: _root_.scala.Predef.String = "",
    recordedAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    signalValues: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Double] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[VehicleSignals] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = vehicleId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (recordedAt.isDefined) {
        val __value = recordedAt.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      signalValues.foreach { __item =>
        val __value = DecodedSample.VehicleSignals._typemapper_signalValues.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = vehicleId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      recordedAt.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      signalValues.foreach { __v =>
        val __m = DecodedSample.VehicleSignals._typemapper_signalValues.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withVehicleId(__v: _root_.scala.Predef.String): VehicleSignals = copy(vehicleId = __v)
    def getRecordedAt: com.google.protobuf.timestamp.Timestamp = recordedAt.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearRecordedAt: VehicleSignals = copy(recordedAt = _root_.scala.None)
    def withRecordedAt(__v: com.google.protobuf.timestamp.Timestamp): VehicleSignals = copy(recordedAt = Option(__v))
    def clearSignalValues = copy(signalValues = _root_.scala.collection.immutable.Map.empty)
    def addSignalValues(__vs: (_root_.scala.Predef.String, _root_.scala.Double)*): VehicleSignals = addAllSignalValues(__vs)
    def addAllSignalValues(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Double)]): VehicleSignals = copy(signalValues = signalValues ++ __vs)
    def withSignalValues(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Double]): VehicleSignals = copy(signalValues = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = vehicleId
          if (__t != "") __t else null
        }
        case 2 => recordedAt.orNull
        case 3 => signalValues.iterator.map(DecodedSample.VehicleSignals._typemapper_signalValues.toBase).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(vehicleId)
        case 2 => recordedAt.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(signalValues.iterator.map(DecodedSample.VehicleSignals._typemapper_signalValues.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = DecodedSample.VehicleSignals
}

object VehicleSignals extends scalapb.GeneratedMessageCompanion[DecodedSample.VehicleSignals] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[DecodedSample.VehicleSignals] = this
  def merge(`_message__`: DecodedSample.VehicleSignals, `_input__`: _root_.com.google.protobuf.CodedInputStream): DecodedSample.VehicleSignals = {
    var __vehicleId = `_message__`.vehicleId
    var __recordedAt = `_message__`.recordedAt
    val __signalValues = (_root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Double] ++= `_message__`.signalValues)
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __vehicleId = _input__.readStringRequireUtf8()
        case 18 =>
          __recordedAt = Option(_root_.scalapb.LiteParser.readMessage(_input__, __recordedAt.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)))
        case 26 =>
          __signalValues += DecodedSample.VehicleSignals._typemapper_signalValues.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, DecodedSample.VehicleSignals.SignalValuesEntry.defaultInstance))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    DecodedSample.VehicleSignals(
        vehicleId = __vehicleId,
        recordedAt = __recordedAt,
        signalValues = __signalValues.result(),
        unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[DecodedSample.VehicleSignals] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      DecodedSample.VehicleSignals(
        vehicleId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        recordedAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        signalValues = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[DecodedSample.VehicleSignals.SignalValuesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(DecodedSample.VehicleSignals._typemapper_signalValues.toCustom).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DecodedSampleProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DecodedSampleProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.protobuf.timestamp.Timestamp
      case 3 => __out = DecodedSample.VehicleSignals.SignalValuesEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.DecodedSample.VehicleSignals.SignalValuesEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = DecodedSample.VehicleSignals(
    vehicleId = "",
    recordedAt = _root_.scala.None,
    signalValues = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class SignalValuesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Double = 0.0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignalValuesEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0.0) {
            _output__.writeDouble(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): SignalValuesEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Double): SignalValuesEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0.0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PDouble(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = DecodedSample.VehicleSignals.SignalValuesEntry
  }
  
  object SignalValuesEntry extends scalapb.GeneratedMessageCompanion[DecodedSample.VehicleSignals.SignalValuesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[DecodedSample.VehicleSignals.SignalValuesEntry] = this
    def merge(`_message__`: DecodedSample.VehicleSignals.SignalValuesEntry, `_input__`: _root_.com.google.protobuf.CodedInputStream): DecodedSample.VehicleSignals.SignalValuesEntry = {
      var __key = `_message__`.key
      var __value = `_message__`.value
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 17 =>
            __value = _input__.readDouble()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      DecodedSample.VehicleSignals.SignalValuesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[DecodedSample.VehicleSignals.SignalValuesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        DecodedSample.VehicleSignals.SignalValuesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DecodedSample.VehicleSignals.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DecodedSample.VehicleSignals.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = DecodedSample.VehicleSignals.SignalValuesEntry(
      key = "",
      value = 0.0
    )
    implicit class SignalValuesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, DecodedSample.VehicleSignals.SignalValuesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, DecodedSample.VehicleSignals.SignalValuesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[DecodedSample.VehicleSignals.SignalValuesEntry, (_root_.scala.Predef.String, _root_.scala.Double)] =
      _root_.scalapb.TypeMapper[DecodedSample.VehicleSignals.SignalValuesEntry, (_root_.scala.Predef.String, _root_.scala.Double)](__m => (__m.key, __m.value))(__p => DecodedSample.VehicleSignals.SignalValuesEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Double,
      unknownFields: _root_.scalapb.UnknownFieldSet
    ): _root_.DecodedSample.VehicleSignals.SignalValuesEntry = _root_.DecodedSample.VehicleSignals.SignalValuesEntry(
      key,
      value,
      unknownFields
    )
  }
  
  implicit class VehicleSignalsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, DecodedSample.VehicleSignals]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, DecodedSample.VehicleSignals](_l) {
    def vehicleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.vehicleId)((c_, f_) => c_.copy(vehicleId = f_))
    def recordedAt: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getRecordedAt)((c_, f_) => c_.copy(recordedAt = Option(f_)))
    def optionalRecordedAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.recordedAt)((c_, f_) => c_.copy(recordedAt = f_))
    def signalValues: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Double]] = field(_.signalValues)((c_, f_) => c_.copy(signalValues = f_))
  }
  final val VEHICLEID_FIELD_NUMBER = 1
  final val RECORDEDAT_FIELD_NUMBER = 2
  final val SIGNALVALUES_FIELD_NUMBER = 3
  @transient
  private val _typemapper_signalValues: _root_.scalapb.TypeMapper[DecodedSample.VehicleSignals.SignalValuesEntry, (_root_.scala.Predef.String, _root_.scala.Double)] = implicitly[_root_.scalapb.TypeMapper[DecodedSample.VehicleSignals.SignalValuesEntry, (_root_.scala.Predef.String, _root_.scala.Double)]]
  def of(
    vehicleId: _root_.scala.Predef.String,
    recordedAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    signalValues: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Double],
    unknownFields: _root_.scalapb.UnknownFieldSet
  ): _root_.DecodedSample.VehicleSignals = _root_.DecodedSample.VehicleSignals(
    vehicleId,
    recordedAt,
    signalValues,
    unknownFields
  )
}
